[MyWordDocStyle]
title>	A Guide to CLP(BNR)
centreblock>
	**Constraint Logic Programming over Booleans, Integers and Reals**
	**Version 0.0, January 2019**

The word "constraint" is used in a variety of contexts from everyday life to physics, mathematics, and other sciences with much the same intuitive meaning, even when the formalization is different. A bead on a wire, a weight on a string, a beaker open to the atmosphere, a space mission limited by onboard fuel, a desert ecology limited by the lack of water are all examples of constrained systems.

CLP refers to the combination of constraints and logic programming. A constraint is declaratively just a relation, usually a mathematical relation, but it differs operationally from other ways of treating relations. As relations, constraints fit very well into logic programming framework which is also based on relations.

CLP systems began appearing an the 1980's and span a considerable variety in system and underlying technology as well as a variety of applications. The first interval based CLP system was incorporated in BNR Prolog (1988) based on ideas of Cleary (1986). The original version was based on intervals over the reals only, but could handle simple nonlinear constraints. In 1992 BNR Prolog's CLP system was extended to CLP(BNR) which provides a uniform treatment of boolean, integer, and real valued variables using interval propagation.

Interval based CLP has a somewhat different character from previous approaches for continuous domains, which were based on traditional technology (such as linear programming) and thus represent only a marginal change. The use of intervals, however, permits one to deal with uncertain or unknown data as well as non-linear models, and thus represents a significant enlargement of the space of problems that can be tackled. In addition, the interval approach can be applied also to discrete domain problems and there provides solutions similar to traditional finite-domain methods. Finally, because of the uniformity of the approach, problems which involve closely interacting mixtures of discrete and continuous domains can be addressed.

The original CLP(BNR) was developed at Bell Northern Research (then the R&D organization of Nortel) and subsequently licensed to Applied Logic Systems of Newton, Mass. in 1994. With the demise of Nortel, the implementation was lost, at least to the orginal developers. However, much of the original literature still is available ([BNR Prolog Papers]), so an attempt to provide an implmentation to support this wealth of information seemed warranted.

CLP systems have either been modified Prolog systems (like Prolog III) or embedded in Prolog (like the original CLP(BNR)). This version of CLP(BNR) takes a different approach. Like [CLP(FD)] (available as a library for SWI-Prolog and others), it is constructed as a module which can be loaded into a SWI-Prolog and is implemented entirely in Prolog (no "foreign language" components). Hopefully this will facilitate better understanding of the internal workings of the system and to encourage further experimentation. It should also facilitate porting to other Prolog systems.

This version of CLP(BNR) was largely based on the original, but has also incorporated ideas from more recent CLP interval systems. In particular, ideas in [CLIP] developed by Tim Hickey and his team at Brandeis University in the late 1990's and [Hickey and Van Emden's work] on the primitive interval relations, have been used. While largely compatible with the original, this version has some differences, partly mandated its implementation as a module on top of SWIP and partly to improve its usability. Specifics of these changes will be covered in the relevant sections of this document.

This document is not focused on either the theoretical underpinnings of CLP(BNR) or on other CLP systems over other domains; these are adequately covered by the existing academic literature and relevant Web sites. Rather the focus is on the practical details of how Prolog programmers can use this version of CLP(BNR) to solve real problems.

TOC>	{#id TableOfContents}`        `**Contents**

@include
	CLPBNR_Module.myw
	CLPBNR_SynSem.myw
	CLPBNR_PrgCons.myw
	CLPBNR_UsingConstraints.myw
&
	[Markdown]    <- link https://en.wikipedia.org/wiki/Markdown
	[Grit]        <- link GritGrammarParser.html
	@import MyWordDocStyle.mmk pkgs/demo.mmk pkgs/toc.mmk pkgs/asciimath.mmk
	{` .. `}      <- <math class = my_math display=inline> asciimath
	.myw ..     <- myword
	// Turn off fancy apostrophe so it can be used as single quote
	// ..         <- <div hidden>
	' <-
	TOC> .. <- toc 3 4
	title> ..       <- <h1 class=_centre>
	centreblock> .. <- <div class=_centre>
	aside> ..       <- <aside class=my_aside>
	@css
		._centre {text-align: center;}
		div.eg, div.demo {margin: 4pt 0;}
		aside.my_aside {font-size:smaller; position:relative; margin-left:30px; margin-right:50px}